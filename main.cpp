#include <iostream>
#include <string> // string inputs
#include <cctype>
#include <limits> //
//#include <chrono> // time function in end summary
#include "functions.h"
#include "prints.h"
using namespace std;

// ASCII text generated by https://fsymbols.com/text-art/

int main()
{
    // Main Menu
    string command;
    bool menu_started = false; // for the cin cout problem
    while (true)
    {
        // Print main menu and get input:
        print_title();

        if (menu_started)
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        getline(cin, command);
        menu_started = true;

        if (command == "0")
        {
            cout << "\033[H\033[J";
            print_instructions();
            continue;
        }
        else if (command == "1")
        {
            // Declaring variables
            int ROWS, COLS; // Max board size
            int total_mines, uncovered = 0;
            char difficulty;
            bool game_started = false; // also for cin cout problem

            // SELECT DIFFICULTY
            select_difficulty(difficulty, ROWS, COLS);

            // Initializing
            char **board = new char *[ROWS];
            initialize_board(board, ROWS, COLS, '0');
            char **coords_uncovered = new char *[ROWS];
            initialize_board(coords_uncovered, ROWS, COLS, '*');

            string input;
            int row, col;

            // making sure first input isn't near a bomb
            for (int i = 0; i < 2; i++)
            {
                print_board(coords_uncovered, ROWS, COLS);
                cout << ">> ";
                //cin.ignore(numeric_limits<streamsize>::max(), '\n');
                getline(cin, input); // a0, b1, etc.
                if (i == 1)
                {
                    if (input.length() == 3 && islower(input[0]) && isdigit(input[1]) && isdigit(input[2]))
                    {
                        row = input[0] - 'a';
                        col = input[2] - '0' + 10;
                        // Check for limit and repeated row/col
                        if (row >= ROWS || col >= COLS || board[row][col] < '0')
                            continue;
                    }
                    else if (input.length() == 2 && islower(input[0]) && isdigit(input[1]))
                    {
                        row = input[0] - 'a';
                        col = input[1] - '0';
                        // Check for limit and repeated row/col
                        if (row >= ROWS || col >= COLS || board[row][col] < '0')
                            continue;
                    }
                    total_mines = generate_mines(board, ROWS, COLS, row, col);
                    generate_clues(board, ROWS, COLS);
                    if (board[row][col] == '0')
                    {
                        flood_fill(board, coords_uncovered, ROWS, COLS, row, col, uncovered);
                    }
                    coords_uncovered[row][col] = board[row][col];
                    uncovered++;
                    cout << uncovered << endl;
                }
            }

            // Game Loop
            game_loop(board, coords_uncovered, ROWS, COLS, uncovered, total_mines, game_started, menu_started, difficulty);
        }
        else if (command == "2")
        {
            int ROWS, COLS, uncovered, total_mines;
            string input;
            char difficulty;
            char **board = NULL;
            char **coords_uncovered = NULL;
            if (!load_board(board, coords_uncovered, ROWS, COLS, uncovered, total_mines))
            {
                cout << "No save file detected\nEnter any value to return to menu" << endl;
                cin >> input;
                continue;
            }

            if (ROWS == 6 && COLS == 8)
                difficulty = '1';

            else if (ROWS == 8 && COLS == 10)
                difficulty = '2';

            else if (ROWS == 10 && COLS == 12)
                difficulty = '3';

            else if (ROWS == 18 && COLS == 20)
                difficulty = '4';

            bool game_started = false; // also for cin cout problem

            // Game Loop
            game_loop(board, coords_uncovered, ROWS, COLS, uncovered, total_mines, game_started, menu_started, difficulty);
        }
        else if (command == "3")
        {
            print_end();
            break;
        }
        else
        {
            menu_started = false;
        }
    }

    return 0;
}
