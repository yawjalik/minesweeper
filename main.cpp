#include <iostream>
#include <string>
#include <cctype>
#include <limits>
#include <chrono>
#include "functions.h"
using namespace std;

// ASCII text generated by https://fsymbols.com/text-art/

int main()
{
    // Main Menu
    string command;
    bool menu_started = false;  // for the cin cout problem
    while (true)
    {
        // Print main menu and get input:
        cout << "\033[H\033[J";
        cout << "█▀▄▀█ █ █▄░█ █▀▀ █▀ █░█░█ █▀▀ █▀▀ █▀█ █▀▀ █▀█" << endl;
        cout << "█░▀░█ █ █░▀█ ██▄ ▄█ ▀▄▀▄▀ ██▄ ██▄ █▀▀ ██▄ █▀▄\n" << endl;
        cout << "0. Instructions   1. New Game   2. Load Game   3. Quit" << endl;
        cout << ">> ";
        if (menu_started)
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        getline(cin, command);
        menu_started = true;

        if (command == "0")
        {
            cout << "\033[H\033[J";
            print_instructions();
            continue;
        }
        else if (command == "1")
        {
            // Declaring variables
            string input;
            int ROWS, COLS; // Max board size
            int row, col;   // user row col input
            int total_mines, uncovered = 0;
            string difficulty;
            bool game_started = false;  // also for cin cout problem

            // SELECT DIFFICULTY
            cout << "\nSELECT DIFFICULTY" << endl;
            cout << "1. Easy   2. Medium   3. Hard   4. Holy Shit\n";
            while (69 < 420) // lmao nice
            {
                cout << ">> ";
                cin >> difficulty;
                if (difficulty == "1")
                {
                    ROWS = 6;
                    COLS = 8;
                    break;
                }
                else if (difficulty == "2")
                {
                    ROWS = 8;
                    COLS = 10;
                    break;
                }
                else if (difficulty == "3")
                {
                    ROWS = 10;
                    COLS = 12;
                    break;
                }
                else if (difficulty == "4")
                {
                    ROWS = 18;
                    COLS = 20;
                    break;
                }
            }

            // Initializing
            char **board = new char *[ROWS];
            initialize_board(board, ROWS, COLS, '0');
            char **coords_uncovered = new char *[ROWS];
            initialize_board(coords_uncovered, ROWS, COLS, '*');

            total_mines = generate_mines(board, ROWS, COLS);
            generate_clues(board, ROWS, COLS);

            // Start clock
            auto begin = chrono::high_resolution_clock::now();

            // Game Loop
            while (true)
            {
                bool flag = false;
                cout << "\033[H\033[J";
                print_board(coords_uncovered, ROWS, COLS);
                // print_board(board, ROWS, COLS);
                cout << ">> ";
                if (!game_started)
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                getline(cin, input); // a0, b1, etc.
                game_started = true;

                // Temporary exit command
                if (input == "quit" || input == "exit")
                {
                    delete_board(board, ROWS);
                    delete_board(coords_uncovered, ROWS);
                    menu_started = false;
                    break;
                }

                // Check invalid input, set row col, check valid row col and no repeats
                if (input.length() == 3 && islower(input[0]) && isdigit(input[1]) && isdigit(input[2]))
                {
                    row = input[0] - 'a';
                    col = input[2] - '0' + 10;
                    // Check for limit and repeated row/col
                    if (row >= ROWS || col >= COLS || board[row][col] < '0')
                        continue;
                }
                if (input.length() == 2 && islower(input[0]) && isdigit(input[1]))
                {
                    row = input[0] - 'a';
                    col = input[1] - '0';
                    // Check for limit and repeated row/col
                    if (row >= ROWS || col >= COLS || board[row][col] < '0')
                        continue;
                }
                // if flag function
                else if (input.length() == 4 && input[0] == '?' && islower(input[1]) && isdigit(input[2]) && isdigit(input[3]))
                {
                    flag = true;
                    row = input[1] - 'a';
                    col = input[3] - '0' + 10;
                    if (row >= ROWS || col >= COLS || board[row][col] < '0')
                        continue;
                }
                else if (input.length() == 3 && input[0] == '?' && islower(input[1]) && isdigit(input[2]))
                {
                    flag = true;
                    row = input[1] - 'a';
                    col = input[2] - '0';
                    if (row >= ROWS || col >= COLS || board[row][col] < '0')
                        continue;
                }
                else
                    continue;

                // Losing condition
                if (board[row][col] == 'X' && !flag && coords_uncovered[row][col] != '?')
                {
                    cout << "\033[H\033[J";
                    print_board(board, ROWS, COLS);

                    auto end = chrono::high_resolution_clock::now();
                    auto elapsed = chrono::duration_cast<chrono::seconds>(end - begin);
                    cout << "Time: " << elapsed.count() << " seconds" << endl;

                    cout << "Game Over!\nEnter any value to return to menu" << endl;
                    delete_board(board, ROWS);
                    delete_board(coords_uncovered, ROWS);
                    cin >> input;
                    menu_started = false;
                    break;
                }

                // Toggle flagging
                if (flag && coords_uncovered[row][col] == '?')
                    coords_uncovered[row][col] = '*';
                else if (flag && coords_uncovered[row][col] == '*')
                    coords_uncovered[row][col] = '?';
                // Uncovering square
                else if (coords_uncovered[row][col] == '*')
                {
                    coords_uncovered[row][col] = board[row][col];
                    uncovered++;
                    cout << uncovered << endl;
                }

                // Winning condition
                if (uncovered == (ROWS * COLS - total_mines))
                {
                    cout << "\033[H\033[J";
                    print_board(board, ROWS, COLS);

                    auto end = chrono::high_resolution_clock::now();
                    auto elapsed = chrono::duration_cast<chrono::seconds>(end - begin);
                    cout << "Time: " << elapsed.count() << " seconds" << endl;

                    cout << "You Win!\nEnter any value to return to menu" << endl;
                    delete_board(board, ROWS);
                    delete_board(coords_uncovered, ROWS);
                    cin >> input;
                    menu_started = false;
                    break;
                }
            }
        }
        else if (command == "2")
        {
            int ROWS, COLS;
            string input;
            char **board = new char *[ROWS];
            if (!load_board(board, ROWS, COLS))
            {
                delete[] board;
                cout << "No save file detected\nEnter any value to return to menu" << endl;
                cin >> input;
                continue;
            }

            cout << "Loaded" << endl;
            // generate_mines(board, ROWS, COLS);
            delete[] board;
        }
        else if (command == "3")
        {
            cout << "\033[H\033[J";
            cout << "█▀▀ █▀█ █▀█ █▀▄ █▄▄ █▄█ █▀▀ █" << endl;
            cout << "█▄█ █▄█ █▄█ █▄▀ █▄█ ░█░ ██▄ ▄" << endl;
            break;
        }
        else
        {
            menu_started = false;
        }
    }

    return 0;
}
