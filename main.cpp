#include <iostream>
#include <string>
#include <cctype>
#include "functions.h"
using namespace std;

// ASCII text generated by https://fsymbols.com/text-art/

void print_covered_map(char map[][COLS])
{
    cout << "  0 1 2 3 4" << endl;
    for (int i = 0; i < ROWS; i++)
    {
        cout << char(i + 'a') << ' ';
        for (int j = 0; j < COLS; j++)
        {
            // Added the condition to cover up the bombs
            if (map[i][j] == 'X')
                cout << '*' << ' ';
            else
                cout << map[i][j] << ' ';
        }
        cout << endl;
    }
}

int main()
{
    char map[ROWS][COLS];

    // Main Menu
    string command;
    while (true)
    {
        // Print main menu and get input:
        // if (started)
        //     cin.ignore(numeric_limits<streamsize>::max(), '\n');
        // cout << flush;
        // system("clear");
        cout << "\033[H\033[J";
        cout << "█▀▄▀█ █ █▄░█ █▀▀ █▀ █░█░█ █▀▀ █▀▀ █▀█ █▀▀ █▀█" << endl;
        cout << "█░▀░█ █ █░▀█ ██▄ ▄█ ▀▄▀▄▀ ██▄ ██▄ █▀▀ ██▄ █▀▄\n" << endl;
        cout << "1. New Game   2. Load Game   3. Quit" << endl;
        cout << ">> ";
        getline(cin, command);

        if (command == "1")
        {
            // Declaring variables
            string input;
            int row, col;
            int uncovered = 0;
            string difficulty;

            initialize_map(map);
            generate_mines(map);

            // SELECT DIFFICULTY
            cout << "\nSELECT DIFFICULTY" << endl;
            cout << "1. Easy   2. Medium   3. Hard   4. Holy Shit\n>> " << endl;
            cin >> difficulty;

            // Game Loop
            while (true)
            {
                // cout << flush;
                // system("clear");
                cout << "\033[H\033[J";
                print_covered_map(map);
                //print_map(map);
                cout << ">> ";
                getline(cin, input);  // something like a0, b1, etc.

                // Temporary exit command
                if (input == "quit" || input == "exit")
                    break;

                // Check invalid input, set row col, check valid row col and no repeats
                if (input.length() == 2 && islower(input[0]) && isdigit(input[1]))
                {
                    row = input[0] - 'a';
                    col = input[1] - '0';
                    // Check for limit and repeated row/col
                    if (row >= ROWS || col >= COLS || map[row][col] == 'O')
                        continue;
                }
                else
                {
                    continue;
                }

                // Losing condition
                if (map[row][col] == 'X')
                {
                    // system("clear");
                    cout << "\033[H\033[J";
                    print_map(map);
                    cout << "Game Over!\nEnter any value to return to menu" << endl;
                    cin >> input;
                    break;
                }

                // Uncovering square
                map[row][col] = 'O'; // O indicates uncovered
                uncovered++;

                // Winning condition
                if (uncovered == (25 - 3))
                {
                    // system("clear");
                    cout << "\033[H\033[J";
                    print_map(map);
                    cout << "You Win!\nEnter any value to return to menu" << endl;
                    cin >> input;
                    break;
                }
            }
        }
        else if (command == "3")
        {
            //system("clear");
            cout << "\033[H\033[J";
            cout << "█▀▀ █▀█ █▀█ █▀▄ █▄▄ █▄█ █▀▀ █" << endl;
            cout << "█▄█ █▄█ █▄█ █▄▀ █▄█ ░█░ ██▄ ▄" << endl;
            break;
        }

    }

    return 0;
}


